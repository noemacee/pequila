"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readinessListener = exports.Ready = exports.killSelf = exports.threadLogger = exports.getNumCpu = exports.getRemoteBarretenbergWasm = exports.getSharedMemoryAvailable = void 0;
const comlink_1 = require("comlink");
function getSharedMemoryAvailable() {
    const globalScope = typeof window !== 'undefined' ? window : globalThis;
    return typeof SharedArrayBuffer !== 'undefined' && globalScope.crossOriginIsolated;
}
exports.getSharedMemoryAvailable = getSharedMemoryAvailable;
function getRemoteBarretenbergWasm(worker) {
    return (0, comlink_1.wrap)(worker);
}
exports.getRemoteBarretenbergWasm = getRemoteBarretenbergWasm;
function getNumCpu() {
    return navigator.hardwareConcurrency;
}
exports.getNumCpu = getNumCpu;
function threadLogger() {
    return console.log;
}
exports.threadLogger = threadLogger;
function killSelf() {
    self.close();
}
exports.killSelf = killSelf;
// Solution to async initialization of workers, taken from
// https://github.com/GoogleChromeLabs/comlink/issues/635#issuecomment-1598913044
/** The message expected by the `readinessListener`. */
exports.Ready = { ready: true };
/** Listen for the readiness message from the Worker and call the `callback` once. */
function readinessListener(worker, callback) {
    worker.addEventListener('message', function ready(event) {
        if (!!event.data && event.data.ready === true) {
            worker.removeEventListener('message', ready);
            callback();
        }
    });
}
exports.readinessListener = readinessListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vaGVscGVycy9icm93c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUErQjtBQUUvQixTQUFnQix3QkFBd0I7SUFDdEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUN4RSxPQUFPLE9BQU8saUJBQWlCLEtBQUssV0FBVyxJQUFJLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztBQUNyRixDQUFDO0FBSEQsNERBR0M7QUFFRCxTQUFnQix5QkFBeUIsQ0FBSSxNQUFjO0lBQ3pELE9BQU8sSUFBQSxjQUFJLEVBQUksTUFBTSxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUZELDhEQUVDO0FBRUQsU0FBZ0IsU0FBUztJQUN2QixPQUFPLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztBQUN2QyxDQUFDO0FBRkQsOEJBRUM7QUFFRCxTQUFnQixZQUFZO0lBQzFCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUNyQixDQUFDO0FBRkQsb0NBRUM7QUFFRCxTQUFnQixRQUFRO0lBQ3RCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNmLENBQUM7QUFGRCw0QkFFQztBQUVELDBEQUEwRDtBQUMxRCxpRkFBaUY7QUFFakYsdURBQXVEO0FBQzFDLFFBQUEsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO0FBRXJDLHFGQUFxRjtBQUNyRixTQUFnQixpQkFBaUIsQ0FBQyxNQUFjLEVBQUUsUUFBb0I7SUFDcEUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxTQUFTLEtBQUssQ0FBQyxLQUFpQztRQUNqRixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsUUFBUSxFQUFFLENBQUM7UUFDYixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUEQsOENBT0MifQ==