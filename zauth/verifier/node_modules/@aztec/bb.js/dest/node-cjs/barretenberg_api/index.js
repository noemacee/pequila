"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BarretenbergApiSync = exports.BarretenbergApi = void 0;
const index_js_1 = require("../serialize/index.js");
const index_js_2 = require("../types/index.js");
class BarretenbergApi {
    constructor(wasm) {
        this.wasm = wasm;
    }
    async pedersenCommit(inputsBuffer, ctxIndex) {
        const inArgs = [inputsBuffer, ctxIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = await this.wasm.callWasmExport('pedersen_commit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHash(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHashes(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHashBuffer(inputBuffer, hashIndex) {
        const inArgs = [inputBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hash_buffer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidon2Hash(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('poseidon2_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidon2Hashes(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('poseidon2_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidon2Permutation(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('poseidon2_permutation', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidon2HashAccumulate(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('poseidon2_hash_accumulate', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async blake2s(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32];
        const result = await this.wasm.callWasmExport('blake2s', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async blake2sToField(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('blake2s_to_field_', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async aesEncryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('aes_encrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async aesDecryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('aes_decrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async srsInitSrs(pointsBuf, numPoints, g2PointBuf) {
        const inArgs = [pointsBuf, numPoints, g2PointBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('srs_init_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async srsInitGrumpkinSrs(pointsBuf, numPoints) {
        const inArgs = [pointsBuf, numPoints].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('srs_init_grumpkin_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async examplesSimpleCreateAndVerifyProof() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('examples_simple_create_and_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async testThreads(threads, iterations) {
        const inArgs = [threads, iterations].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)()];
        const result = await this.wasm.callWasmExport('test_threads', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async commonInitSlabAllocator(circuitSize) {
        const inArgs = [circuitSize].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('common_init_slab_allocator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirGetCircuitSizes(constraintSystemBuf, recursive, honkRecursion) {
        const inArgs = [constraintSystemBuf, recursive, honkRecursion].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_circuit_sizes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async acirNewAcirComposer(sizeHint) {
        const inArgs = [sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = await this.wasm.callWasmExport('acir_new_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirDeleteAcirComposer(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_delete_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirInitProvingKey(acirComposerPtr, constraintSystemBuf, recursive) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, recursive].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_init_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirCreateProof(acirComposerPtr, constraintSystemBuf, recursive, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, recursive, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_create_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProveAndVerifyUltraHonk(constraintSystemBuf, witnessBuf) {
        const inArgs = [constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_and_verify_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProveAndVerifyMegaHonk(constraintSystemBuf, witnessBuf) {
        const inArgs = [constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_and_verify_mega_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProveAztecClient(ivcInputsBuf) {
        const inArgs = [ivcInputsBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)(), (0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async acirVerifyAztecClient(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirLoadVerificationKey(acirComposerPtr, vkBuf) {
        const inArgs = [acirComposerPtr, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_load_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirInitVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_init_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirGetVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGetProvingKey(acirComposerPtr, acirVec, recursive) {
        const inArgs = [acirComposerPtr, acirVec, recursive].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVerifyProof(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGetSolidityVerifier(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirHonkSolidityVerifier(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_honk_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirSerializeProofIntoFields(acirComposerPtr, proofBuf, numInnerPublicInputs) {
        const inArgs = [acirComposerPtr, proofBuf, numInnerPublicInputs].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('acir_serialize_proof_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirSerializeVerificationKeyIntoFields(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr), index_js_2.Fr];
        const result = await this.wasm.callWasmExport('acir_serialize_verification_key_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async acirProveUltraHonk(acirVec, witnessVec) {
        const inArgs = [acirVec, witnessVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProveUltraKeccakHonk(acirVec, witnessVec) {
        const inArgs = [acirVec, witnessVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProveUltraStarknetHonk(acirVec, witnessVec) {
        const inArgs = [acirVec, witnessVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_prove_ultra_starknet_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVerifyUltraHonk(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVerifyUltraKeccakHonk(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVerifyUltraStarknetHonk(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_ultra_starknet_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirWriteVkUltraHonk(acirVec) {
        const inArgs = [acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_write_vk_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirWriteVkUltraKeccakHonk(acirVec) {
        const inArgs = [acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_write_vk_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirWriteVkUltraStarknetHonk(acirVec) {
        const inArgs = [acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_write_vk_ultra_starknet_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirProofAsFieldsUltraHonk(proofBuf) {
        const inArgs = [proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('acir_proof_as_fields_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVkAsFieldsUltraHonk(vkBuf) {
        const inArgs = [vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('acir_vk_as_fields_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVkAsFieldsMegaHonk(vkBuf) {
        const inArgs = [vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('acir_vk_as_fields_mega_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGatesAztecClient(ivcInputsBuf) {
        const inArgs = [ivcInputsBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_gates_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
}
exports.BarretenbergApi = BarretenbergApi;
class BarretenbergApiSync {
    constructor(wasm) {
        this.wasm = wasm;
    }
    pedersenCommit(inputsBuffer, ctxIndex) {
        const inArgs = [inputsBuffer, ctxIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = this.wasm.callWasmExport('pedersen_commit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHash(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHashes(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHashBuffer(inputBuffer, hashIndex) {
        const inArgs = [inputBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hash_buffer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidon2Hash(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('poseidon2_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidon2Hashes(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('poseidon2_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidon2Permutation(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('poseidon2_permutation', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidon2HashAccumulate(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('poseidon2_hash_accumulate', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    blake2s(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32];
        const result = this.wasm.callWasmExport('blake2s', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    blake2sToField(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('blake2s_to_field_', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    aesEncryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('aes_encrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    aesDecryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('aes_decrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    srsInitSrs(pointsBuf, numPoints, g2PointBuf) {
        const inArgs = [pointsBuf, numPoints, g2PointBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('srs_init_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    srsInitGrumpkinSrs(pointsBuf, numPoints) {
        const inArgs = [pointsBuf, numPoints].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('srs_init_grumpkin_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    examplesSimpleCreateAndVerifyProof() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('examples_simple_create_and_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    testThreads(threads, iterations) {
        const inArgs = [threads, iterations].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)()];
        const result = this.wasm.callWasmExport('test_threads', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    commonInitSlabAllocator(circuitSize) {
        const inArgs = [circuitSize].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('common_init_slab_allocator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirGetCircuitSizes(constraintSystemBuf, recursive, honkRecursion) {
        const inArgs = [constraintSystemBuf, recursive, honkRecursion].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_circuit_sizes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    acirNewAcirComposer(sizeHint) {
        const inArgs = [sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = this.wasm.callWasmExport('acir_new_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirDeleteAcirComposer(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_delete_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirInitProvingKey(acirComposerPtr, constraintSystemBuf, recursive) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, recursive].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_init_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirCreateProof(acirComposerPtr, constraintSystemBuf, recursive, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, recursive, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_create_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirProveAndVerifyUltraHonk(constraintSystemBuf, witnessBuf) {
        const inArgs = [constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_prove_and_verify_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirProveAndVerifyMegaHonk(constraintSystemBuf, witnessBuf) {
        const inArgs = [constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_prove_and_verify_mega_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirProveAztecClient(ivcInputsBuf) {
        const inArgs = [ivcInputsBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)(), (0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_prove_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    acirVerifyAztecClient(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_verify_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirLoadVerificationKey(acirComposerPtr, vkBuf) {
        const inArgs = [acirComposerPtr, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_load_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirInitVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_init_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirGetVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGetProvingKey(acirComposerPtr, acirVec, recursive) {
        const inArgs = [acirComposerPtr, acirVec, recursive].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVerifyProof(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGetSolidityVerifier(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirHonkSolidityVerifier(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = this.wasm.callWasmExport('acir_honk_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirSerializeProofIntoFields(acirComposerPtr, proofBuf, numInnerPublicInputs) {
        const inArgs = [acirComposerPtr, proofBuf, numInnerPublicInputs].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('acir_serialize_proof_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirSerializeVerificationKeyIntoFields(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr), index_js_2.Fr];
        const result = this.wasm.callWasmExport('acir_serialize_verification_key_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    acirProveUltraHonk(acirVec, witnessVec) {
        const inArgs = [acirVec, witnessVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_prove_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirProveUltraKeccakHonk(acirVec, witnessVec) {
        const inArgs = [acirVec, witnessVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_prove_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVerifyUltraHonk(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_verify_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVerifyUltraKeccakHonk(proofBuf, vkBuf) {
        const inArgs = [proofBuf, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_verify_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirWriteVkUltraHonk(acirVec) {
        const inArgs = [acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_write_vk_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirWriteVkUltraKeccakHonk(acirVec) {
        const inArgs = [acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_write_vk_ultra_keccak_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirProofAsFieldsUltraHonk(proofBuf) {
        const inArgs = [proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('acir_proof_as_fields_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVkAsFieldsUltraHonk(vkBuf) {
        const inArgs = [vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('acir_vk_as_fields_ultra_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVkAsFieldsMegaHonk(vkBuf) {
        const inArgs = [vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('acir_vk_as_fields_mega_honk', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGatesAztecClient(ivcInputsBuf) {
        const inArgs = [ivcInputsBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_gates_aztec_client', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
}
exports.BarretenbergApiSync = BarretenbergApiSync;
//# sourceMappingURL=data:application/json;base64,